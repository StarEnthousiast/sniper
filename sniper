repeat wait() until game:IsLoaded()
local Booths_Broadcast = game:GetService("ReplicatedStorage").Network:WaitForChild("Booths_Broadcast")
local message1 = {}
local Players = game:GetService('Players')
local PlayerInServer = #Players:GetPlayers()
local ostime = os.time()
local http = game:GetService("HttpService")

if not getgenv().a then
    getgenv().a = true
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
        vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
end

local function sendWebhookNotification(title, content)
    local notificationMessage = {
        ['content'] = content,
        ['embeds'] = {
            {
                ['title'] = title,
                ["color"] = tonumber(0xFF0000),
                ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ"),
            },
        }
    }

    local jsonMessage = http:JSONEncode(notificationMessage)
    http:PostAsync("https://discord.com/api/webhooks/1189489437130899456/cY5c12rmklRLRBAjvQQNj-QAxg2HbQhbfBZ0LCGSVM5KNeoGwW11VoCY0Gg0Q4SE-tgS", jsonMessage)
end
sendWebhookNotification("Script Started", "Started sniping")

local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, exclusive)
    print(uid, gems, item, version, shiny, amount, boughtFrom, exclusive)
    print("BOUGHT FROM:", boughtFrom)
    print("UID:", uid)
    print("GEMS:", gems)
    print("ITEM:", item)

    local snipeMessage = game.Players.LocalPlayer.Name .. " just sniped a "

    local remainingGems = game:GetService('Players').LocalPlayer.PlayerGui.MainLeft.Left.Currency.Diamonds.Diamonds.Amount.Text
    if version then
        if version == 2 then
            version = "Rainbow"
        elseif version == 1 then
            version = "Golden"
        end
    else
       version = "Normal"
    end
    
    snipeMessage = snipeMessage .. version
    
    if shiny then
        snipeMessage = snipeMessage .. " Shiny"
    end
    
    snipeMessage = snipeMessage .. " " .. (item)
    
    print(snipeMessage)
    
    if amount then
        print("AMOUNT:", amount)
    else
        amount = 1
        print("AMOUNT:", amount)
    end

    message1 = {
        ['content'] = "New Snipe!",
        ['embeds'] = {
            {
                ['title'] = snipeMessage,
                ["color"] = tonumber(0x33dd99),
                ["timestamp"] = DateTime.now():ToIsoDate(),
                ['fields'] = {
                    {
                        ['name'] = "PRICE:",
                        ['value'] = tostring(gems) .. " GEMS" (Remaining: " .. remainingGems .. " GEMS)",
                    },
                    {
                        ['name'] = "BOUGHT FROM:",
                        ['value'] = tostring(boughtFrom),
                    },
                    {
                        ['name'] = "AMOUNT:",
                        ['value'] = tostring(amount),
                    },
                    {
                        ['name'] = "PETID:",
                        ['value'] = tostring(uid),
                    },
                },
            },
        }
    }

    local http = game:GetService("HttpService")
    local jsonMessage = http:JSONEncode(message1)
    http:PostAsync(getgenv().webhook, jsonMessage)
end


local conditions = {
    { type = "exclusiveLevel", exclude = {"Banana", "Coin"}, cost = 10000 },
    { type = "huge", cost = 3000000 },
    { type = "titanic", cost = 10000000 },
    { type = "customItem", item = "Crystal Key Upper Half", cost = 20000 },
    { type = "customItem", item = "Huge", exclude = {"Huge Hunter"}, cost = 3000000 },
    { type = "customItem", item = "Crystal Key Lower Half", cost = 10000 },
    { type = "customItem", item = "Crystal Key", exclude = {"Crystal Key Lower Half", "Crystal Key Upper Half"}, cost = 40000 },
    { type = "customItem", item = "Spinny Wheel Ticket", cost = 19000 },
    { type = "customItem", item = "Hologram Shark", cost = 130000 },
    { type = "customItem", item = "Rift Dragon", cost = 130000 },
    { type = "customItem", item = "Titanic Present", cost = 300000 },
    { type = "customItem", item = "Lucky Block", cost = 100000 },
    { type = "customItem", item = "Huge Hunter", cost = 1000000 },
    { type = "customItem", item = "Fortune", exclude = {"Fortune Flag"}, cost = 110000 },
    { type = "customItem", item = "Royalty Charm", cost = 2500000 },
    { type = "customItem", item = "Strength Charm", cost = 100000 },
    { type = "customItem", item = "Chest Mimic", cost = 500000 },
    { type = "customItem", item = "Exclusive Egg", cost = 300000 },
    { type = "customItem", item = "Titanic Christmas Present", cost = 10000 },
}

local function checkAndPurchase(uid, gems, item, version, shiny, amount, playerid, exclusive)
    gems = tonumber(gems)
    local type = Library.Directory.Pets[item]

    for _, condition in ipairs(conditions) do
        local conditionMet = false

        if condition.type == "customItem" then
            conditionMet = string.find(item, condition.item) and gems <= condition.cost
        else
            conditionMet = type[condition.type] and gems <= condition.cost
        end

        if conditionMet and not table.find(condition.exclude, item) then
            local bought = game:GetService("ReplicatedStorage").Network.Booths_RequestPurchase:InvokeServer(playerid, uid)
            if bought then
                processListingInfo(uid, gems, item, version, shiny, amount, playerid, exclusive)
            end
            break
        end
    end
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
    local playerID = message.PlayerID
    if type(message) == "table" then
        local listing = message.Listings
        for uid, value in pairs(listing) do
            local gems = value.DiamondCost
            local itemdata = value.ItemData
            if itemdata and itemdata.data then
                local data = itemdata.data
                checkAndPurchase(uid, gems, data.id, data.pt, data.sh, data._am, playerID, data.excl)
            end
        end
    end
end)


local function jumpToServer() 
    local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true" 
    local req = request({ Url = string.format(sfUrl, 15502339080, "Desc", 100) }) 
    local body = game:GetService("HttpService"):JSONDecode(req.Body) 
    local deep = math.random(1, 3)
    if deep > 1 then 
        for i = 1, deep, 1 do 
            req = request({ Url = string.format(sfUrl .. "&cursor=" .. body.nextPageCursor, 15502339080, "Desc", 100) }) 
            body = game:GetService("HttpService"):JSONDecode(req.Body) 
            task.wait(0.1)
        end 
    end 
    local servers = {} 
    if body and body.data then 
        for i, v in next, body.data do 
            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                table.insert(servers, 1, v.id)
            end
        end
    end
    local randomCount = #servers
    if not randomCount then
        randomCount = 2
    end
    game:GetService("TeleportService"):TeleportToPlaceInstance(15502339080, servers[math.random(1, randomCount)], game:GetService("Players").LocalPlayer) 
end


local function startTimer()
    while true do
        wait(1080)  -- 18 minutes (18 * 60 seconds)
        jumpToServer()  -- Trigger the jumpToServer function every 18 minutes
        sendWebhookNotification("Server Hopped, 18 mins passed")
    end
end
startTimer()


while wait(0.1) do
    PlayerInServer = #Players:GetPlayers()
    if PlayerInServer < 35 or os.time() >= ostime + 600 then
        jumpToServer()
        break
    end
    for count = 1, #alts, 1 do
        if game.Players:FindFirstChild(alts[count]) and alts[count] ~= game:GetService("Players").LocalPlayer.Name then
            jumpToServer()
            sendWebhookNotification("Server Hopped, Found Blacklisted")
            break
        elseif player:IsInGroup(5060810) then
            jumpToServer()
            sendWebhookNotification("Server Hopper, Found Staff")
            break
        end
    end
end
